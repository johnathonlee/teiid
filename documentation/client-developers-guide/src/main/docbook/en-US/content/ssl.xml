<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % CustomDTD SYSTEM "../../../../../../docbook/custom.dtd">
%CustomDTD;
]>
<chapter id="ssl">
    <title>Secure Client Connections using SSL in Teiid</title>
    
    <para>This chapter will shows you various security configurations 
    that can be used with Teiid in securing your data access. Note that data level
    security (<link linkend="entitlements">data entitlements</link>) are explained in separate chapter.</para>
    
    <sect1 id="default_security">
        <title>Default Security</title>
        <para>By default, access to Teiid is NOT secure. The login modules are only 
        backed by file based authentication, and it also creates well known user 
        name and password for easy access for users who want to give a quick try of the Teiid.
        The same is also true for making the connection to the Admin Console application that Teiid provides. 
        However, we DO NOT recommend leaving the default security profile as defined when you 
        are exposing sensitive data. Check out the "Admin Guide" for instructions as to how to
        configure different login modules to secure the access.</para>
        
        <para>This chapter is dedicated to discuss about securing the communication channels, 
        like the socket connection between your client application and Teiid Server. If you are always using a 
        <link linkend="local_connection">local connection</link>, then you may not need to secure the channels as
        cleint and server are in the same VM process.</para>
    
        <para>By default all sensitive (non-data) messages between client and server 
        are encrypted using a <ulink url="http://en.wikipedia.org/wiki/Diffie-Hellman_key_exchange">Diffy-Hellman</ulink> 
        key that is negotiated per connection. This 
        encryption is controlled by <code>clientEncryptionEnabled</code> property in <code>JdbcSslConfiguration</code> and 
        <code>AdminSslConfiguration</code> sections  
        in <code>&lt;jboss-install&gt;/server/&lt;profile&gt;/deploy/teiid/teiid-jboss-beans.xml</code> file. So, the 
        passwords are never sent in the clear channel during session establishment.</para>
    </sect1>
    
    <sect1 id="ssl_modes">
        <title>SSL Modes</title>
        <para>Teiid supports SSL based channel between the client JDBC application and Teiid Server. Teiid supports the following
        SSL modes.</para>
        <orderedlist>
            <listitem><para>Anonymous  – No certificates are required, but all communications are still 
            encrypted using the TLS_DH_anon_WITH_AES_128_CBC_SHA SSL suite.</para></listitem>
            <listitem><para>1-way – Only authenticates the server to the client traffic.  Requires a private key keystore to be created 
            for the server and a truststore at the client that authenticates that key.  The SSL suite is negotiated.</para></listitem>
            <listitem><para>2-way  – Mutual client and server authentication. The server and client applications 
            each have a keystore for their private keys and each has a truststore that authenticates the other.</para></listitem>
        </orderedlist>
        
        <para>Depending upon the SSL mode, follow the guidelines of your organization around creating/obtaining 
        private keys.  If you have no organizational requirements, then follow this guide to create 
        <link linkend="appendix-selfcerts">self-signed certificates</link> with their respective keystores and truststores.</para>
        <para>The following keystore and truststore combinations are required for different SSL modes. The names of 
        the files can be chosen by the user. The following files are shown for example purposes only.</para>
        
        <para><emphasis>1-way</emphasis> </para>
        <orderedlist>
            <listitem><para>server.keystore - has server's private key</para></listitem>
            <listitem><para>server.truststore - has server's public key</para></listitem>
        </orderedlist>

        <para><emphasis>2-way</emphasis> </para>
        <orderedlist>
            <listitem><para>server.keystore - has server's private key</para></listitem>
            <listitem><para>server.truststore - has server's public key</para></listitem>
            <listitem><para>client.keystore - client's private key</para></listitem>
            <listitem><para>client.truststore - has client's public key</para></listitem>
        </orderedlist>
        <para>or</para>
        <orderedlist>
            <listitem><para>server.keystore - has server's private key, client's pulic key</para></listitem>
            <listitem><para>client.keystore - client's private key, and server's public key</para></listitem>
        </orderedlist>
    </sect1>
    
    <sect1 id="connfigure_server">
        <title>Configuring SSL in Teiid Server</title>
        <para>The Teiid's configuration file 
        <code>&lt;jboss-install&gt;/server/&lt;profile&gt;/deploy/teiid/teiid-jboss-beans.xml</code>, 
        contains the properties to configure SSL. Teiid Server, has two separate connection profiles. One for the JDBC
        connections and the other for the Admin connections. They both have separate SSL configuration
        properties, so besure to know which properties that you are editing.</para>
        <orderedlist>
            <listitem><para>JDBC Connection - The <code>JdbcSslConfiguration</code> bean configuration defines this.</para></listitem>
            <listitem><para>Admin Connection - The <code>AdminSslConfiguration</code> bean configuration defines this.</para></listitem>
        </orderedlist>
        <para>The configurations look same as below sample.</para>
           <programlisting><![CDATA[
            <bean name="JdbcSslConfiguration" class="org.teiid.transport.SSLConfiguration">
                <property name="sslEnabled">false</property>
                <property name="keystoreFilename">cert.keystore</property>
                <property name="keystorePassword">passwd</property>
                <property name="keystoreType">JKS</property>
                <property name="sslProtocol">SSLv3</property>
                <property name="keymanagementAlgorithm">false</property>
                <property name="truststoreFilename">cert.truststore</property>
                <property name="truststorePassword">passwd</property>
                <!--  1-way, 2-way, anonymous -->
                <property name="authenticationMode">1-way</property>
                <property name="clientEncryptionEnabled">true</property>
            </bean>
           ]]></programlisting>       
           <para>The properties are described below.</para>
           <orderedlist>
            <listitem><para>sslEnabled - true|false, SSL usage either turned ON or OFF </para></listitem>
            <listitem><para>sslProtocol- Type of SSL protocol to be used. Default is SSLv3</para></listitem>
            <listitem><para>keystoreType - Keystore type created by the keytool. Default "JKS" is used.</para></listitem>
            <listitem><para>authenticationMode - anonymous|1-way|2-way,  Type of SSL mode, see  
            above about different <link linkend="ssl_modes">SSL modes</link> available.</para></listitem>
            <listitem><para>keymanagementAlgorithm - Type of key algorithm used. Default 
            is based upon the VM, e.g. "SunX509"</para></listitem>
            <listitem><para>keystoreFilename - The file name of the keystore, which contains the 
            private key of the Server. This must be available in the classpath of Teiid Server</para></listitem>
            <listitem><para>keystorePassword - password for the keystore.</para></listitem>
            <listitem><para>truststoreFilename - if "authenticationMode" is chosen 
            as "2-way", then this property must be provided. This is the truststore that contains the 
            public key for the client. Depending upon how you created the keystore and truststores, 
            this may be same file as defined under  "keystoreFilename" property.</para></listitem>
            <listitem><para>truststorePassword - password for the truststore. </para></listitem>
           </orderedlist>  
           
           <para>Once all the properties are defined, make sure the certificates are in the right place, then restart the 
           Teiid server to start accepting connections using SSL.</para>
    </sect1>
    
    <sect1 id="configure_client">
        <title>Configuring SSL in Teiid's Client</title>
        <para>Configuring any Java client program with SSL involves modifying scripts that 
        launch the client programs to define few Java VM  system properties using "-Dkey=value" format. The 
        following sections define the system properties required for each SSL mode. Note that when 
        connecting to Teiid Server with SSL enabled, you <emphasis>MUST</emphasis> use 
        the <emphasis>"mms"</emphasis> protocol, instead of "mm" in the JDBC connection URL, for example</para>
        
        <para>  jdbc:teiid:&lt;myVdb&gt;@<emphasis>mms</emphasis>://&lt;host&gt;:&lt;port&gt;</para>
        
        <para>There are two different sets of properties that a client can configure to enable  1-way or 2-way SSL.</para>
        
        <sect2>
            <title>Option 1: Java SSL properties (recommended)</title>
            <para>These are standard Java defined system properties to configure the SSL under any JVM, Teiid is not 
            unique in its use of SSL. Provide the following system properties to the client VM process.</para>
            
            <para>1-way SSL</para>
           <programlisting><![CDATA[
            -Djavax.net.ssl.trustStore=<dir>/server.truststore (required)
            -Djavax.net.ssl.trustStorePassword=<password> (optional)   
            -Djavax.net.ssl.keyStoreType (optional)
           ]]></programlisting>
           
           <para>2-way SSL</para>
           <programlisting><![CDATA[
                -Djavax.net.ssl.keyStore=<dir>/client.keystore (required)
                -Djavax.net.ssl.keyStrorePassword=<password> (optional)
                -Djavax.net.ssl.trustStore=<dir>/server.truststore (required)
                -Djavax.net.ssl.trustStorePassword=<password> (optioanl)
                -Djavax.net.ssl.keyStroreType=<keystore type> (optional)
           ]]></programlisting>             
                        
        </sect2>
        
        <sect2>
            <title>Option 2: Teiid Specific Properties</title>
            <para>Use this option for <emphasis>"anonymous"</emphasis> mode or when the above "javax" based properties 
            are already in use by the host process. For example if your client application is a Tomcat 
            process that is configured for https protocol and the above Java based properties are 
            already in use, and importing Teiid-specific certificate keys into those https 
            certificate keystores is not allowed.</para>
            
            <para>In this scenario, a different set of Teiid-specific SSL properties can be defined inside 
            the "teiid-client-settings.properties" file, such that they do not override the VM specific 
            SSL properties specified for host process. The "teiid-client-settings.properties" file 
            can be found inside the "teiid-{version}-client.jar" file at the root directory location. 
            Extract this file, or make a copy, change the property values required for the chosen SSL mode, 
            and place this file in the client application's classpath before 
            the "teiid-{version}-client.jar" file.</para>
            
            <para>SSL properties inside  "teiid-client-settings.properties" are shown below
            (read more property comments inline). Provide the following required properties for different SSL modes.
            </para>
            
           <programlisting><![CDATA[
                ########################################
                # SSL Settings
                ########################################
                
                #
                # The key store type.  Defaults to JKS
                #
                
                org.teiid.ssl.keyStoreType=JKS
                
                #
                # The key store algorithm, defaults to 
                # the system property "ssl.TrustManagerFactory.algorithm"
                #
                
                #org.teiid.ssl.algorithm=
                
                #
                # The classpath or filesystem location of the
                # key store.
                # 
                # This property is required only if performing 2-way
                # authentication that requires a specific private 
                # key.
                #
                
                #org.teiid.ssl.keyStore=
                
                #
                # The key store password (not required)
                #
                
                #org.teiid.ssl.keyStorePassword=
                
                #
                # The classpath or filesystem location of the
                # trust store.
                # 
                # This property is required if performing 1-way
                # authentication that requires trust not provided
                # by the system defaults.
                #
                # Set to NONE for anonymous authentication using
                # the TLS_DH_anon_WITH_AES_128_CBC_SHA cipher suite 
                #
                
                #org.teiid.ssl.trustStore=
                
                #
                # The trust store password (not required)
                #
                
                #org.teiid.ssl.trustStorePassword=
                
                #
                # The cipher protocol, defaults to SSLv3
                #
                
                org.teiid.ssl.protocol=SSLv3

           ]]></programlisting>           
           
           <para>1-way SSL</para>
           <programlisting><![CDATA[
           org.teiid.ssl.trustStore=<dir>/server.truststore (required)           
           ]]></programlisting>
           
           
           <para>2-way SSL</para>
           <programlisting><![CDATA[
            org.teiid.ssl.keyStore=<dir>/client.keystore (required)
            org.teiid.ssl.trustStore=<dir>/server.truststore (required)           
           ]]></programlisting>                

           <para>Anonymous</para>
           <programlisting><![CDATA[
           org.teiid.ssl.trustStore=NONE
           ]]></programlisting>                
                           
        </sect2>
    </sect1>
</chapter>