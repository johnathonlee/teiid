<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="getting_started">
	<title>Getting Started with AdminShell</title>
	<para>
		To learn the basics of
		<ulink url="http://groovy.codehaus.org/">Groovy</ulink>
		take a look at their documents and tutorials on their website.
	</para>
	<para>
		Basic knowledge of the Java programming language and types is required
		in order to effectively design and develop
		scripts using the AdminShell. To learn Java language find learning resources
		at <ulink url="http://java.sun.com/">http://java.sun.com</ulink>.
	</para>
	<para>You can learn about the Teiid administrative API either using
		“adminHelp()” function or find JavaDoc
		for in the installation directory.</para>
	<para>AdminShell is a specialized version of Groovy which works in
		several different modes: interactive shell, console, or script
		run mode.</para>
	<para>In interactive shell mode (launched via adminshell), the user can invoke connect to a live
		Teiid system and issue any
		ad-hoc commands to control the system. The interactive buffer can be used to
		develop a scipt and the interactive session input and output can be
		captured into a log file, more
		on this later in the document.</para>
	<para>In console mode (lanched via adminconsole), the user can develop and run scripts using a graphical text editor that supports syntax highlighting.</para>
	<para>In the script run mode, the user can execute/play back previously
		developed scripts. This mode especially
		useful to automate any testing or to perform any repeated
		configurations/migrations changes to a Teiid
		system</para>
	<sect1>
		<title>Essential rules to follow in using AdminShell</title>
		<para>To use AdminShell successfully, there are some basic syntactical rules
			you should keep in mind.</para>
		<orderedlist>
			<listitem>
				<para>In interactive mode, most commands (as seen by the help command) are used to control shell behavior and are not general Groovy scripting constructs. Admin methods will typically be called using functional notation:</para>
				<programlisting><![CDATA[
          connectAsAdmin()
        ]]></programlisting>
			</listitem>
			<listitem>
				<para>All commands and functions are case sensitive.</para>
			</listitem>
			<listitem>
				<para>An ending semicolon is optional for Groovy statements.</para>
			</listitem>
			<listitem>
				<para>If a function requires input parameter(s), they should be
					declared inside "(" and ")".  A function may have more than
					one parameter.  String parameters can be wrapped in double or single quotes.  Example:</para>
				<programlisting><![CDATA[
          connectAsAdmin("mm://localhost:34413", "user", "password")
        ]]></programlisting>
			</listitem>
			<listitem>
				<para>Other Java methods and classes can be used from your scripts, if the
					required Java class libraries are already in class path. You may place additional jars in the 
					lib directory to have be automatically part of the class path.  An example showing an import:
        </para>
				<programlisting><![CDATA[
            import my.package.*;
            myObject = new MyClass();
            myObject.doSomething();          
          ]]></programlisting>
			</listitem>
		</orderedlist>
		<para>To execute the commands and arbitrary script in interactive mode you enter them first
			and press enter to execute, then
			enter the next line, so on.</para>
		<para>To exit the tool in the interactive mode, first disconnect if
			you are connected to the Teiid
			system by executing “disconnect();” then type "exit". In the script
			mode, when execution of the
			script finishes the tool will exit automatically, however you still have to
			disconnect from Teiid
			system in the script.</para>
		<para>Note: If SSL is turned on the Teiid server, you would need to
			supply the correct certificates for the connection.
		</para>
	</sect1>
	<sect1>
		<title>Basic commands to get started</title>
		<para>The list below contains some common commands used in AdminShell.</para>
		<programlisting><![CDATA[   
println "xxx";   // print something to console

adminHelp();     // shows all the available admin commands; 

sql = connect(); // get an extended Groovy Sql connection using connection.properties file

sql.execute(<SQL>); // run any SQL command. 

connectAsAdmin(); // connect as admin; no need have the vdb name. SQL commands will not work under this connection

println getConnectionName();  // returns the current connection name

useConnection(<connection name>); // switches to using the given connection settings

disconnect();   // disconnects the current connection in the context
        ]]></programlisting>
	</sect1>
	<sect1>
		<title>Help</title>
		<para>The adminHelp() methods lists all the available administrative API
			methods in the AdminShell. Please note
			that none of the Groovy Shell commands or other available function calls will be shown in
			this list</para>
		<programlisting><![CDATA[ 
adminHelp();
    ]]></programlisting>
		<para>To get a specific definition about a method and it's required
			input parameters, use adminHelp("method")</para>
		<programlisting><![CDATA[ 
adminHelp("deployVDB");

/*
 *Deploy a VDB from file
 */
void deployVDB(
    String /* file name */)
  throws AdminException
  throws FileNotFoundException
      ]]></programlisting>
		<para />
		<para>The sqlHelp() methods lists all Sql extension 
			methods.</para>
		<programlisting><![CDATA[ 
sqlHelp();
    ]]></programlisting>
		<para>To get a specific definition about a method and it's required
			input parameters, use sqlHelp("method")</para>
		<para />
	</sect1>
</chapter>