<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % CustomDTD SYSTEM "../../../../../../docbook/custom.dtd">
%CustomDTD;
]>
<chapter id="logging">
	<title>Logging</title>
	<sect1 id="general_logging">
		<title>General Logging</title>
		<para>
			The Teiid system provides a wealth of information via logging. To
			control logging level, contexts, and log locations, you should be
			familiar with
			<ulink url="http://logging.apache.org/log4j/">log4j</ulink>
			and the container's jboss-log4j.xml configuration file. All the logs
			produced by Teiid are prefixed by org.teiid. This makes it extremely
			easy to control of of Teiid logging from a single context.
		</para>
		<sect2>
			<title>Command Logging API</title>
			<para>
				If the default log4j logging mechanisms are not sufficient for your
				logging needs you may need a appender - see
				<ulink url="http://logging.apache.org/log4j/1.2/apidocs/index.html">the log4j javadocs</ulink>
				. Note that log4j already provides quite a few appenders including
				JMS, RDBMS, and SMTP.
			</para>
			<para>If you develop a custom logging solution, the implementation
				jar should be placed in the lib directory of the server profile
				Teiid is installed in.
	    	</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Command Logging</title>
		<para>Command logging captures executing commands in the
			Teiid System.
			Both user commands (that have been submitted
			to Teiid)
			and data source
			commands (that are being executed by the
			connectors)
			are tracked
			through command logging.</para>
		<para>To enable command logging to the default log location, simply
			enable the DETAIL level of logging for the org.teiid.COMMAND_LOG
			context.</para>
		<para>To enable command logging to an alternative file location,
			configure a separate file appender for the DETAIL logging of the
			org.teiid.COMMAND_LOG context. An example of this is already in
			the log4j.xml distributed with Teiid.</para>
		<sect2>
			<title>Command Logging API</title>
			<para>
				If the default log4j logging mechanisms are not sufficient for
				your
				command logging needs, you may need a custom log4j appender.
				The
				custom appender will have access to log4j LoggingEvents to the
				COMMAND_LOG context, which have a
				message that is an instance of
				org.teiid.logging.api.CommandLogMessage (defined in the teiid-connector-api-&versionNumber;.jar).
			</para>
			<para>
				See
				<link linkend="general_logging">General Logging</link>
				for more information on utilizing log4j.
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Audit Logging</title>
		<para>Audit logging captures important security events. This includes
			the enforcement of permissions, authentication success/failures, etc.
		</para>
		<para>To enable audit logging to the default log location, simply
			enable the DETAIL level of logging for the org.teiid.AUDIT_LOG
			context.</para>
		<para>To enable audit logging to an alternative file location,
			configure a separate file appender for the DETAIL logging of the
			org.teiid.AUDIT_LOG context. An example of this is already in
			the
			log4j.xml distributed with Teiid.</para>
		<sect2>
			<title>Audit Logging API</title>
			<para>
				If the default log4j logging mechanisms are not sufficient for
				your
				audit logging needs, you may need a custom log4j appender.
				The
				custom appender will have access to log4j LoggingEvents to the
				AUDIT_LOG context, which have a
				message that is an instance of
				org.teiid.logging.api.AuditMessage (defined in the teiid-connector-api-&versionNumber;.jar). AuditMessages include
				information about user, the action, and the target(s) of the action.
			</para>
			<para>
				See
				<link linkend="general_logging">General Logging</link>
				for more information on utilizing log4j.
			</para>
		</sect2>
	</sect1>
</chapter>