<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<appendix id="grammar">
  <title>BNF for SQL Grammar</title><section>
<title>TOKENS</title>
<informaltable frame="none">
<tgroup cols="1">
<colspec colname="c1" colwidth="100*"/>
<tbody>
<row><entry><para>
&lt;DEFAULT&gt; SKIP : {
" "
| "\t"
| "\n"
| "\r"
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; MORE : {
"/*" : IN_MULTI_LINE_COMMENT
}

</para></entry></row>
<row><entry><para>
&lt;IN_MULTI_LINE_COMMENT&gt; SPECIAL : {
&lt;MULTI_LINE_COMMENT: "*/"&gt; : DEFAULT
}

</para></entry></row>
<row><entry><para>
&lt;IN_MULTI_LINE_COMMENT&gt; MORE : {
&lt;~[]&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;STRING: "string"&gt;
| &lt;VARCHAR: "varchar"&gt;
| &lt;BOOLEAN: "boolean"&gt;
| &lt;BYTE: "byte"&gt;
| &lt;TINYINT: "tinyint"&gt;
| &lt;SHORT: "short"&gt;
| &lt;SMALLINT: "smallint"&gt;
| &lt;CHAR: "char"&gt;
| &lt;INTEGER: "integer"&gt;
| &lt;LONG: "long"&gt;
| &lt;BIGINT: "bigint"&gt;
| &lt;BIGINTEGER: "biginteger"&gt;
| &lt;FLOAT: "float"&gt;
| &lt;REAL: "real"&gt;
| &lt;DOUBLE: "double"&gt;
| &lt;BIGDECIMAL: "bigdecimal"&gt;
| &lt;DECIMAL: "decimal"&gt;
| &lt;DATE: "date"&gt;
| &lt;TIME: "time"&gt;
| &lt;TIMESTAMP: "timestamp"&gt;
| &lt;OBJECT: "object"&gt;
| &lt;BLOB: "blob"&gt;
| &lt;CLOB: "clob"&gt;
| &lt;XML: "xml"&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;CAST: "cast"&gt;
| &lt;CONVERT: "convert"&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;ADD: "add"&gt;
| &lt;ALL: "all"&gt;
| &lt;ALTER: "alter"&gt;
| &lt;AND: "and"&gt;
| &lt;ANY: "any"&gt;
| &lt;ARRAY: "array"&gt;
| &lt;ARRAY_AGG: "array_agg"&gt;
| &lt;AS: "as"&gt;
| &lt;ASC: "asc"&gt;
| &lt;ATOMIC: "atomic"&gt;
| &lt;AUTORIZATION: "authorization"&gt;
| &lt;BEGIN: "begin"&gt;
| &lt;BETWEEN: "between"&gt;
| &lt;BINARY: "binary"&gt;
| &lt;BOTH: "both"&gt;
| &lt;BREAK: "break"&gt;
| &lt;BY: "by"&gt;
| &lt;CALL: "call"&gt;
| &lt;CALLED: "called"&gt;
| &lt;CASCADED: "cascaded"&gt;
| &lt;CASE: "case"&gt;
| &lt;CHARACTER: "character"&gt;
| &lt;CHECK: "check"&gt;
| &lt;CLOSE: "close"&gt;
| &lt;COLLATE: "collate"&gt;
| &lt;COLUMN: "column"&gt;
| &lt;COMMIT: "commit"&gt;
| &lt;CONNECT: "connect"&gt;
| &lt;CONSTRAINT: "constraint"&gt;
| &lt;CONTINUE: "continue"&gt;
| &lt;CORRESPONDING: "corresponding"&gt;
| &lt;CURRENT_DATE: "current_date"&gt;
| &lt;CURRENT_TIME: "current_time"&gt;
| &lt;CURRENT_TIMESTAMP: "current_timestamp"&gt;
| &lt;CURRENT_USER: "current_user"&gt;
| &lt;CREATE: "create"&gt;
| &lt;CRITERIA: "criteria"&gt;
| &lt;CROSS: "cross"&gt;
| &lt;CURSOR: "cursor"&gt;
| &lt;DAY: "day"&gt;
| &lt;DEALLOCATE: "deallocate"&gt;
| &lt;DEFAULT_KEYWORD: "default"&gt;
| &lt;DECLARE: "declare"&gt;
| &lt;DELETE: "delete"&gt;
| &lt;DESC: "desc"&gt;
| &lt;DESCRIBE: "describe"&gt;
| &lt;DETERMINISTIC: "deterministic"&gt;
| &lt;DISCONNECT: "disconnect"&gt;
| &lt;DISTINCT: "distinct"&gt;
| &lt;DROP: "drop"&gt;
| &lt;EACH: "each"&gt;
| &lt;ELSE: "else"&gt;
| &lt;END: "end"&gt;
| &lt;ERROR: "error"&gt;
| &lt;ESCAPE: "escape"&gt;
| &lt;EXCEPT: "except"&gt;
| &lt;EXEC: "exec"&gt;
| &lt;EXECUTE: "execute"&gt;
| &lt;EXTERNAL: "external"&gt;
| &lt;EXISTS: "exists"&gt;
| &lt;FALSE: "false"&gt;
| &lt;FETCH: "fetch"&gt;
| &lt;FILTER: "filter"&gt;
| &lt;FOR: "for"&gt;
| &lt;FORIEGN: "foriegn"&gt;
| &lt;FROM: "from"&gt;
| &lt;FULL: "full"&gt;
| &lt;FUNCTION: "function"&gt;
| &lt;GET: "get"&gt;
| &lt;GLOBAL: "global"&gt;
| &lt;GRANT: "grant"&gt;
| &lt;GROUP: "group"&gt;
| &lt;HAS: "has"&gt;
| &lt;HAVING: "having"&gt;
| &lt;HOLD: "hold"&gt;
| &lt;HOUR: "hour"&gt;
| &lt;IF: "if"&gt;
| &lt;IDENTITY: "identity"&gt;
| &lt;IMMEDIATE: "immediate"&gt;
| &lt;IN: "in"&gt;
| &lt;INDICATOR: "indicator"&gt;
| &lt;INNER: "inner"&gt;
| &lt;INPUT: "input"&gt;
| &lt;INOUT: "inout"&gt;
| &lt;INSENSITIVE: "insensitive"&gt;
| &lt;INSERT: "insert"&gt;
| &lt;INTERSECT: "intersect"&gt;
| &lt;INTERVAL: "interval"&gt;
| &lt;INTO: "into"&gt;
| &lt;IS: "is"&gt;
| &lt;ISOLATION: "isolation"&gt;
| &lt;JOIN: "join"&gt;
| &lt;LEFT: "left"&gt;
| &lt;LANGUAGE: "language"&gt;
| &lt;LARGE: "large"&gt;
| &lt;LEADING: "leading"&gt;
| &lt;LIKE: "like"&gt;
| &lt;LIMIT: "limit"&gt;
| &lt;LOCAL: "local"&gt;
| &lt;LOOP: "loop"&gt;
| &lt;MAKEDEP: "makedep"&gt;
| &lt;MAKENOTDEP: "makenotdep"&gt;
| &lt;MATCH: "match"&gt;
| &lt;MERGE: "merge"&gt;
| &lt;METHOD: "method"&gt;
| &lt;MINUTE: "minute"&gt;
| &lt;MODIFIES: "modifies"&gt;
| &lt;MODULE: "module"&gt;
| &lt;MONTH: "month"&gt;
| &lt;NATURAL: "natural"&gt;
| &lt;NEW: "new"&gt;
| &lt;NOCACHE: "nocache"&gt;
| &lt;NO: "no"&gt;
| &lt;NONE: "none"&gt;
| &lt;NOT: "not"&gt;
| &lt;NULL: "null"&gt;
| &lt;OF: "of"&gt;
| &lt;OLD: "old"&gt;
| &lt;ON: "on"&gt;
| &lt;ONLY: "only"&gt;
| &lt;OPEN: "open"&gt;
| &lt;OPTION: "option"&gt;
| &lt;OR: "or"&gt;
| &lt;ORDER: "order"&gt;
| &lt;OUTER: "outer"&gt;
| &lt;OUTPUT: "output"&gt;
| &lt;OVER: "over"&gt;
| &lt;OVERLAPS: "OVERLAPS"&gt;
| &lt;PARAMETER: "parameter"&gt;
| &lt;PARTITION: "partition"&gt;
| &lt;PRECISION: "precision"&gt;
| &lt;PREPARE: "prepare"&gt;
| &lt;PRIMARY: "primary"&gt;
| &lt;PROCEDURE: "procedure"&gt;
| &lt;RANGE: "range"&gt;
| &lt;READS: "reads"&gt;
| &lt;RECURSIVE: "recursive"&gt;
| &lt;REFERENCES: "REFERENCES"&gt;
| &lt;REFERENCING: "REFERENCING"&gt;
| &lt;RETURN: "return"&gt;
| &lt;RETURNS: "returns"&gt;
| &lt;REVOKE: "REVOKE"&gt;
| &lt;RIGHT: "right"&gt;
| &lt;ROLLBACK: "ROLLBACK"&gt;
| &lt;ROLLUP: "ROLLUP"&gt;
| &lt;ROW: "row"&gt;
| &lt;ROWS: "rows"&gt;
| &lt;SAVEPOINT: "savepoint"&gt;
| &lt;SCROLL: "scroll"&gt;
| &lt;SEARCH: "search"&gt;
| &lt;SECOND: "second"&gt;
| &lt;SELECT: "select"&gt;
| &lt;SENSITIVE: "sensitive"&gt;
| &lt;SESSION_USER: "session_user"&gt;
| &lt;SET: "set"&gt;
| &lt;SIMILAR: "similar"&gt;
| &lt;SPECIFIC: "specific"&gt;
| &lt;SOME: "some"&gt;
| &lt;SQL: "sql"&gt;
| &lt;SQLEXCEPTION: "sqlexception"&gt;
| &lt;SQLSTATE: "sqlstate"&gt;
| &lt;SQLWARNING: "sqlwarning"&gt;
| &lt;START: "start"&gt;
| &lt;STATIC: "static"&gt;
| &lt;SYSTEM: "system"&gt;
| &lt;SYSTEM_USER: "system_user"&gt;
| &lt;TABLE: "table"&gt;
| &lt;TEMPORARY: "temporary"&gt;
| &lt;THEN: "then"&gt;
| &lt;TIMEZONE_HOUR: "timezone_hour"&gt;
| &lt;TIMEZONE_MINUTE: "timezone_minute"&gt;
| &lt;TO: "to"&gt;
| &lt;TRAILING: "trailing"&gt;
| &lt;TRANSLATE: "translate"&gt;
| &lt;TRIGGER: "trigger"&gt;
| &lt;TRUE: "true"&gt;
| &lt;UNION: "union"&gt;
| &lt;UNIQUE: "unique"&gt;
| &lt;UNKNOWN: "unknown"&gt;
| &lt;USER: "user"&gt;
| &lt;UPDATE: "update"&gt;
| &lt;USING: "using"&gt;
| &lt;VALUE: "value"&gt;
| &lt;VALUES: "values"&gt;
| &lt;VIRTUAL: "virtual"&gt;
| &lt;WHEN: "when"&gt;
| &lt;WHENEVER: "whenever"&gt;
| &lt;WHERE: "where"&gt;
| &lt;WITH: "with"&gt;
| &lt;WHILE: "while"&gt;
| &lt;WINDOW: "window"&gt;
| &lt;WITHIN: "within"&gt;
| &lt;WITHOUT: "without"&gt;
| &lt;YEAR: "year"&gt;
| &lt;ALLOCATE: "allocate"&gt;
| &lt;ARE: "are"&gt;
| &lt;ASENSITIVE: "asensitive"&gt;
| &lt;ASYMETRIC: "asymetric"&gt;
| &lt;CYCLE: "cycle"&gt;
| &lt;DEC: "dec"&gt;
| &lt;DEREF: "deref"&gt;
| &lt;DYNAMIC: "dynamic"&gt;
| &lt;ELEMENT: "element"&gt;
| &lt;FREE: "free"&gt;
| &lt;INT: "int"&gt;
| &lt;LATERAL: "lateral"&gt;
| &lt;LOCALTIME: "localtime"&gt;
| &lt;LOCALTIMESTAMP: "localtimestamp"&gt;
| &lt;MEMBER: "member"&gt;
| &lt;MULTISET: "multiset"&gt;
| &lt;NATIONAL: "national"&gt;
| &lt;NCHAR: "nchar"&gt;
| &lt;NCLOB: "nclob"&gt;
| &lt;NUMERIC: "numeric"&gt;
| &lt;RELEASE: "release"&gt;
| &lt;SPECIFICTYPE: "specifictype"&gt;
| &lt;SYMETRIC: "symetric"&gt;
| &lt;SUBMULTILIST: "submultilist"&gt;
| &lt;TRANSLATION: "translation"&gt;
| &lt;TREAT: "treat"&gt;
| &lt;VARYING: "varying"&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;XMLAGG: "xmlagg"&gt;
| &lt;XMLATTRIBUTES: "xmlattributes"&gt;
| &lt;XMLBINARY: "xmlbinary"&gt;
| &lt;XMLCAST: "xmlcast"&gt;
| &lt;XMLCONCAT: "xmlconcat"&gt;
| &lt;XMLCOMMENT: "xmlcomment"&gt;
| &lt;XMLDOCUMENT: "xmldocument"&gt;
| &lt;XMLELEMENT: "xmlelement"&gt;
| &lt;XMLEXISTS: "xmlexists"&gt;
| &lt;XMLFOREST: "xmlforest"&gt;
| &lt;XMLITERATE: "xmliterate"&gt;
| &lt;XMLNAMESPACES: "xmlnamespaces"&gt;
| &lt;XMLPARSE: "xmlparse"&gt;
| &lt;XMLPI: "xmlpi"&gt;
| &lt;XMLQUERY: "xmlquery"&gt;
| &lt;XMLSERIALIZE: "xmlserialize"&gt;
| &lt;XMLTABLE: "xmltable"&gt;
| &lt;XMLTEXT: "xmltext"&gt;
| &lt;XMLVALIDATE: "xmlvalidate"&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;DATALINK: "datalink"&gt;
| &lt;DLNEWCOPY: "dlnewcopy"&gt;
| &lt;DLPREVIOUSCOPY: "dlpreviouscopy"&gt;
| &lt;DLURLCOMPLETE: "dlurlcomplete"&gt;
| &lt;DLURLCOMPLETEWRITE: "dlurlcompletewrite"&gt;
| &lt;DLURLCOMPLETEONLY: "dlurlcompleteonly"&gt;
| &lt;DLURLPATH: "dlurlpath"&gt;
| &lt;DLURLPATHWRITE: "dlurlpathwrite"&gt;
| &lt;DLURLPATHONLY: "dlurlpathonly"&gt;
| &lt;DLURLSCHEME: "dlurlscheme"&gt;
| &lt;DLURLSERVER: "dlurlserver"&gt;
| &lt;DLVALUE: "dlvalue"&gt;
| &lt;IMPORT: "import"&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;ALL_IN_GROUP: &lt;ID&gt; &lt;PERIOD&gt; &lt;STAR&gt;&gt;
| &lt;ID: &lt;QUOTED_ID&gt; (&lt;PERIOD&gt; &lt;QUOTED_ID&gt;)*&gt;
| &lt;#QUOTED_ID: &lt;ID_PART&gt; | "\"" ("\"\"" | ~["\""])+ "\""&gt;
| &lt;#ID_PART: ("@" | "#" | &lt;LETTER&gt;) (&lt;LETTER&gt; | "_" | &lt;DIGIT&gt;)*&gt;
| &lt;DATETYPE: "{" "d"&gt;
| &lt;TIMETYPE: "{" "t"&gt;
| &lt;TIMESTAMPTYPE: "{" "ts"&gt;
| &lt;BOOLEANTYPE: "{" "b"&gt;
| &lt;POS_REF: ["$"] (&lt;DIGIT&gt;)+&gt;
| &lt;INTEGERVAL: (&lt;MINUS&gt;)? (&lt;DIGIT&gt;)+&gt;
| &lt;FLOATVAL: (&lt;MINUS&gt;)? (&lt;DIGIT&gt;)* &lt;PERIOD&gt; (&lt;DIGIT&gt;)+ (["e","E"] (["+","-"])? (&lt;DIGIT&gt;)+)?&gt;
| &lt;STRINGVAL: ("N" | "E")? "\'" ("\'\'" | ~["\'"])* "\'"&gt;
| &lt;#LETTER: ["a"-"z","A"-"Z"] | ["\u0153"-"\ufffd"]&gt;
| &lt;#DIGIT: ["0"-"9"]&gt;
}

</para></entry></row>
<row><entry><para>
&lt;DEFAULT&gt; TOKEN : {
&lt;COMMA: ","&gt;
| &lt;PERIOD: "."&gt;
| &lt;LPAREN: "("&gt;
| &lt;RPAREN: ")"&gt;
| &lt;LBRACE: "{"&gt;
| &lt;RBRACE: "}"&gt;
| &lt;LSBRACE: "["&gt;
| &lt;RSBRACE: "]"&gt;
| &lt;EQ: "="&gt;
| &lt;NE: "&lt;&gt;"&gt;
| &lt;NE2: "!="&gt;
| &lt;LT: "&lt;"&gt;
| &lt;LE: "&lt;="&gt;
| &lt;GT: "&gt;"&gt;
| &lt;GE: "&gt;="&gt;
| &lt;STAR: "*"&gt;
| &lt;SLASH: "/"&gt;
| &lt;PLUS: "+"&gt;
| &lt;MINUS: "-"&gt;
| &lt;QMARK: "?"&gt;
| &lt;DOLLAR: "$"&gt;
| &lt;SEMICOLON: ";"&gt;
| &lt;CONCAT_OP: "||"&gt;
}

</para></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>NON-TERMINALS</title>
<informaltable frame="none">
<tgroup cols="2">
<colspec colname="c1" colwidth=".33*"/>
<colspec colname="c2" colwidth="*"/>
<tbody>
<row>
<entry align="right" valign="top"><para><anchor id="prod1" xreflabel="stringVal"/>stringVal</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;STRINGVAL&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod2" xreflabel="id"/>id</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;ID&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod3" xreflabel="command"/>command</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod4">createUpdateProcedure</link> | <link linkend="prod5">userCommand</link> | <link linkend="prod6">callableStatement</link> ) ( &lt;SEMICOLON&gt; )? &lt;EOF&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod7" xreflabel="designerCommand"/>designerCommand</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod8">updateProcedure</link> | <link linkend="prod5">userCommand</link> ) ( &lt;SEMICOLON&gt; )? &lt;EOF&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod8" xreflabel="updateProcedure"/>updateProcedure</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod4">createUpdateProcedure</link> | <link linkend="prod9">forEachRowTriggerAction</link> ) &lt;EOF&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod10" xreflabel="createTrigger"/>createTrigger</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;CREATE&gt; &lt;TRIGGER&gt; &lt;ON&gt; <link linkend="prod2">id</link> <link linkend="prod11">nonReserved</link> &lt;OF&gt; ( &lt;INSERT&gt; | &lt;UPDATE&gt; | &lt;DELETE&gt; ) &lt;AS&gt; <link linkend="prod9">forEachRowTriggerAction</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod12" xreflabel="alter"/>alter</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ALTER&gt; ( ( <link linkend="prod11">nonReserved</link> <link linkend="prod2">id</link> &lt;AS&gt; <link linkend="prod13">queryExpression</link> ) | ( &lt;PROCEDURE&gt; <link linkend="prod2">id</link> &lt;AS&gt; <link linkend="prod14">block</link> ) | ( &lt;TRIGGER&gt; &lt;ON&gt; <link linkend="prod2">id</link> <link linkend="prod11">nonReserved</link> &lt;OF&gt; ( &lt;INSERT&gt; | &lt;UPDATE&gt; | &lt;DELETE&gt; ) ( ( &lt;AS&gt; <link linkend="prod9">forEachRowTriggerAction</link> ) | <link linkend="prod11">nonReserved</link> ) ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod9" xreflabel="forEachRowTriggerAction"/>forEachRowTriggerAction</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;FOR&gt; &lt;EACH&gt; &lt;ROW&gt; <link linkend="prod14">block</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod5" xreflabel="userCommand"/>userCommand</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod13">queryExpression</link> | <link linkend="prod15">storedProcedure</link> | <link linkend="prod16">insert</link> | <link linkend="prod17">update</link> | <link linkend="prod18">delete</link> | <link linkend="prod19">dropTable</link> | <link linkend="prod20">createTempTable</link> | <link linkend="prod12">alter</link> | <link linkend="prod10">createTrigger</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod19" xreflabel="dropTable"/>dropTable</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;DROP&gt; &lt;TABLE&gt; <link linkend="prod2">id</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod20" xreflabel="createTempTable"/>createTempTable</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;CREATE&gt; &lt;LOCAL&gt; &lt;TEMPORARY&gt; &lt;TABLE&gt; <link linkend="prod2">id</link> &lt;LPAREN&gt; <link linkend="prod21">tableElement</link> ( &lt;COMMA&gt; <link linkend="prod21">tableElement</link> )* ( &lt;COMMA&gt; &lt;PRIMARY&gt; <link linkend="prod11">nonReserved</link> &lt;LPAREN&gt; <link linkend="prod2">id</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> )* &lt;RPAREN&gt; )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod21" xreflabel="tableElement"/>tableElement</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> ( <link linkend="prod22">dataTypeString</link> | <link linkend="prod11">nonReserved</link> ) ( &lt;NOT&gt; &lt;NULL&gt; )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod23" xreflabel="errorStatement"/>errorStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ERROR&gt; <link linkend="prod24">expression</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod25" xreflabel="statement"/>statement</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod26">ifStatement</link> | <link linkend="prod27">loopStatement</link> | <link linkend="prod28">whileStatement</link> | <link linkend="prod29">delimitedStatement</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod29" xreflabel="delimitedStatement"/>delimitedStatement</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod30">assignStatement</link> | <link linkend="prod31">sqlStatement</link> | <link linkend="prod23">errorStatement</link> | <link linkend="prod32">declareStatement</link> | <link linkend="prod33">continueStatement</link> | <link linkend="prod34">breakStatement</link> ) &lt;SEMICOLON&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod14" xreflabel="block"/>block</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod25">statement</link> | ( &lt;BEGIN&gt; ( <link linkend="prod25">statement</link> )* &lt;END&gt; ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod34" xreflabel="breakStatement"/>breakStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;BREAK&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod33" xreflabel="continueStatement"/>continueStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;CONTINUE&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod28" xreflabel="whileStatement"/>whileStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;WHILE&gt; &lt;LPAREN&gt; <link linkend="prod35">criteria</link> &lt;RPAREN&gt; <link linkend="prod14">block</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod27" xreflabel="loopStatement"/>loopStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;LOOP&gt; &lt;ON&gt; &lt;LPAREN&gt; <link linkend="prod13">queryExpression</link> &lt;RPAREN&gt; &lt;AS&gt; <link linkend="prod2">id</link> <link linkend="prod14">block</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod26" xreflabel="ifStatement"/>ifStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;IF&gt; &lt;LPAREN&gt; <link linkend="prod35">criteria</link> &lt;RPAREN&gt; <link linkend="prod14">block</link> ( &lt;ELSE&gt; <link linkend="prod14">block</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod36" xreflabel="criteriaSelector"/>criteriaSelector</para></entry>
<entry align="left" valign="top"><para>::= 
( ( &lt;EQ&gt; | &lt;NE&gt; | &lt;NE2&gt; | &lt;LE&gt; | &lt;GE&gt; | &lt;LT&gt; | &lt;GT&gt; | &lt;IN&gt; | &lt;LIKE&gt; | ( &lt;IS&gt; &lt;NULL&gt; ) | &lt;BETWEEN&gt; ) )? &lt;CRITERIA&gt; ( &lt;ON&gt; &lt;LPAREN&gt; <link linkend="prod2">id</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> )* &lt;RPAREN&gt; )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod37" xreflabel="hasCriteria"/>hasCriteria</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;HAS&gt; <link linkend="prod36">criteriaSelector</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod32" xreflabel="declareStatement"/>declareStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;DECLARE&gt; <link linkend="prod38">dataType</link> <link linkend="prod2">id</link> ( ( <link linkend="prod11">nonReserved</link> | &lt;EQ&gt; ) <link linkend="prod39">assignStatementOperand</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod30" xreflabel="assignStatement"/>assignStatement</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> ( <link linkend="prod11">nonReserved</link> | &lt;EQ&gt; ) <link linkend="prod39">assignStatementOperand</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod39" xreflabel="assignStatementOperand"/>assignStatementOperand</para></entry>
<entry align="left" valign="top"><para>::= 
( ( <link linkend="prod16">insert</link> ) | <link linkend="prod17">update</link> | <link linkend="prod18">delete</link> | ( <link linkend="prod24">expression</link> ) | <link linkend="prod13">queryExpression</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod31" xreflabel="sqlStatement"/>sqlStatement</para></entry>
<entry align="left" valign="top"><para>::= 
( ( <link linkend="prod5">userCommand</link> ) | <link linkend="prod40">dynamicCommand</link> | ( <link linkend="prod2">id</link> ( <link linkend="prod11">nonReserved</link> | &lt;EQ&gt; ) <link linkend="prod15">storedProcedure</link> ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod41" xreflabel="translateCriteria"/>translateCriteria</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;TRANSLATE&gt; <link linkend="prod36">criteriaSelector</link> ( &lt;WITH&gt; &lt;LPAREN&gt; <link linkend="prod2">id</link> &lt;EQ&gt; <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> &lt;EQ&gt; <link linkend="prod24">expression</link> )* &lt;RPAREN&gt; )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod4" xreflabel="createUpdateProcedure"/>createUpdateProcedure</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;CREATE&gt; ( &lt;VIRTUAL&gt; )? ( &lt;UPDATE&gt; )? &lt;PROCEDURE&gt; <link linkend="prod14">block</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod40" xreflabel="dynamicCommand"/>dynamicCommand</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;EXECUTE&gt; | &lt;EXEC&gt; ) ( ( &lt;STRING&gt; | &lt;IMMEDIATE&gt; ) )? <link linkend="prod24">expression</link> ( &lt;AS&gt; <link linkend="prod42">createElementsWithTypes</link> ( &lt;INTO&gt; <link linkend="prod2">id</link> )? )? ( &lt;USING&gt; <link linkend="prod43">setClauseList</link> )? ( &lt;UPDATE&gt; ( ( &lt;INTEGERVAL&gt; ) | ( &lt;STAR&gt; ) ) )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod43" xreflabel="setClauseList"/>setClauseList</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> &lt;EQ&gt; ( &lt;COMMA&gt; <link linkend="prod2">id</link> &lt;EQ&gt; )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod42" xreflabel="createElementsWithTypes"/>createElementsWithTypes</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> <link linkend="prod22">dataTypeString</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> <link linkend="prod22">dataTypeString</link> )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod6" xreflabel="callableStatement"/>callableStatement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;LBRACE&gt; ( &lt;QMARK&gt; &lt;EQ&gt; )? &lt;CALL&gt; <link linkend="prod2">id</link> ( &lt;LPAREN&gt; ( <link linkend="prod44">executeUnnamedParams</link> ) &lt;RPAREN&gt; )? &lt;RBRACE&gt; ( <link linkend="prod45">option</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod15" xreflabel="storedProcedure"/>storedProcedure</para></entry>
<entry align="left" valign="top"><para>::= 
( ( &lt;EXEC&gt; | &lt;EXECUTE&gt; | &lt;CALL&gt; ) <link linkend="prod2">id</link> &lt;LPAREN&gt; ( <link linkend="prod46">executeNamedParams</link> | <link linkend="prod44">executeUnnamedParams</link> ) &lt;RPAREN&gt; ) ( <link linkend="prod45">option</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod44" xreflabel="executeUnnamedParams"/>executeUnnamedParams</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod46" xreflabel="executeNamedParams"/>executeNamedParams</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod2">id</link> &lt;EQ&gt; ( &lt;GT&gt; )? <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> &lt;EQ&gt; ( &lt;GT&gt; )? <link linkend="prod24">expression</link> )* )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod16" xreflabel="insert"/>insert</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;INSERT&gt; &lt;INTO&gt; <link linkend="prod2">id</link> ( <link linkend="prod47">columnList</link> )? ( ( &lt;VALUES&gt; <link linkend="prod48">rowValues</link> ) | ( <link linkend="prod13">queryExpression</link> ) ) ( <link linkend="prod45">option</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod47" xreflabel="columnList"/>columnList</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;LPAREN&gt; <link linkend="prod2">id</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod48" xreflabel="rowValues"/>rowValues</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;LPAREN&gt; <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod17" xreflabel="update"/>update</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;UPDATE&gt; <link linkend="prod2">id</link> &lt;SET&gt; <link linkend="prod43">setClauseList</link> ( <link linkend="prod49">where</link> )? ( <link linkend="prod45">option</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod18" xreflabel="delete"/>delete</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;DELETE&gt; &lt;FROM&gt; <link linkend="prod2">id</link> ( <link linkend="prod49">where</link> )? ( <link linkend="prod45">option</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod13" xreflabel="queryExpression"/>queryExpression</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;WITH&gt; <link linkend="prod50">withListElement</link> ( &lt;COMMA&gt; <link linkend="prod50">withListElement</link> )* )? <link linkend="prod51">queryExpressionBody</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod50" xreflabel="withListElement"/>withListElement</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> ( <link linkend="prod47">columnList</link> )? &lt;AS&gt; &lt;LPAREN&gt; <link linkend="prod13">queryExpression</link> &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod51" xreflabel="queryExpressionBody"/>queryExpressionBody</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod52">queryTerm</link> ( ( &lt;UNION&gt; | &lt;EXCEPT&gt; ) ( &lt;ALL&gt; | &lt;DISTINCT&gt; )? <link linkend="prod52">queryTerm</link> )* ( <link linkend="prod53">orderby</link> )? ( <link linkend="prod54">limit</link> )? ( <link linkend="prod45">option</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod52" xreflabel="queryTerm"/>queryTerm</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod55">queryPrimary</link> ( &lt;INTERSECT&gt; ( &lt;ALL&gt; | &lt;DISTINCT&gt; )? <link linkend="prod55">queryPrimary</link> )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod55" xreflabel="queryPrimary"/>queryPrimary</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod56">query</link> | ( &lt;TABLE&gt; <link linkend="prod2">id</link> ) | ( &lt;LPAREN&gt; <link linkend="prod51">queryExpressionBody</link> &lt;RPAREN&gt; ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod56" xreflabel="query"/>query</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod57">select</link> ( <link linkend="prod58">into</link> )? ( <link linkend="prod59">from</link> ( <link linkend="prod49">where</link> )? ( <link linkend="prod60">groupBy</link> )? ( <link linkend="prod61">having</link> )? )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod58" xreflabel="into"/>into</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;INTO&gt; ( <link linkend="prod2">id</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod57" xreflabel="select"/>select</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;SELECT&gt; ( &lt;ALL&gt; | ( &lt;DISTINCT&gt; ) )? ( &lt;STAR&gt; | ( <link linkend="prod62">selectSymbol</link> ( &lt;COMMA&gt; <link linkend="prod62">selectSymbol</link> )* ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod62" xreflabel="selectSymbol"/>selectSymbol</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod63">selectExpression</link> | <link linkend="prod64">allInGroupSymbol</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod63" xreflabel="selectExpression"/>selectExpression</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod24">expression</link> ( ( &lt;AS&gt; )? <link linkend="prod2">id</link> )? )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod65" xreflabel="derivedColumn"/>derivedColumn</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod24">expression</link> ( &lt;AS&gt; <link linkend="prod2">id</link> )? )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod64" xreflabel="allInGroupSymbol"/>allInGroupSymbol</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ALL_IN_GROUP&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod66" xreflabel="xmlAgg"/>xmlAgg</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLAGG&gt; &lt;LPAREN&gt; <link linkend="prod24">expression</link> ( <link linkend="prod53">orderby</link> )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod67" xreflabel="arrayAgg"/>arrayAgg</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ARRAY_AGG&gt; &lt;LPAREN&gt; <link linkend="prod24">expression</link> ( <link linkend="prod53">orderby</link> )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod68" xreflabel="textAgg"/>textAgg</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod11">nonReserved</link> &lt;LPAREN&gt; &lt;FOR&gt; <link linkend="prod65">derivedColumn</link> ( &lt;COMMA&gt; <link linkend="prod65">derivedColumn</link> )* ( &lt;ID&gt; <link linkend="prod69">charVal</link> )? ( ( &lt;ID&gt; <link linkend="prod69">charVal</link> ) )? ( &lt;ID&gt; )? ( ( &lt;ID&gt; <link linkend="prod2">id</link> ) )? ( <link linkend="prod53">orderby</link> )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod70" xreflabel="aggregateSymbol"/>aggregateSymbol</para></entry>
<entry align="left" valign="top"><para>::= 
( ( <link linkend="prod11">nonReserved</link> &lt;LPAREN&gt; &lt;STAR&gt; &lt;RPAREN&gt; ) | ( ( <link linkend="prod11">nonReserved</link> | &lt;ANY&gt; | &lt;SOME&gt; ) &lt;LPAREN&gt; ( &lt;DISTINCT&gt; | &lt;ALL&gt; )? <link linkend="prod24">expression</link> &lt;RPAREN&gt; ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod59" xreflabel="from"/>from</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;FROM&gt; ( <link linkend="prod71">tableReference</link> ( &lt;COMMA&gt; <link linkend="prod71">tableReference</link> )* )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod71" xreflabel="tableReference"/>tableReference</para></entry>
<entry align="left" valign="top"><para>::= 
( ( &lt;LBRACE&gt; <link linkend="prod11">nonReserved</link> <link linkend="prod72">joinedTable</link> &lt;RBRACE&gt; ) | <link linkend="prod72">joinedTable</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod72" xreflabel="joinedTable"/>joinedTable</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod73">tablePrimary</link> ( ( <link linkend="prod74">crossJoin</link> | <link linkend="prod75">qualifiedJoin</link> ) )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod74" xreflabel="crossJoin"/>crossJoin</para></entry>
<entry align="left" valign="top"><para>::= 
( ( &lt;CROSS&gt; | &lt;UNION&gt; ) &lt;JOIN&gt; <link linkend="prod73">tablePrimary</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod75" xreflabel="qualifiedJoin"/>qualifiedJoin</para></entry>
<entry align="left" valign="top"><para>::= 
( ( ( &lt;RIGHT&gt; ( &lt;OUTER&gt; )? ) | ( &lt;LEFT&gt; ( &lt;OUTER&gt; )? ) | ( &lt;FULL&gt; ( &lt;OUTER&gt; )? ) | &lt;INNER&gt; )? &lt;JOIN&gt; <link linkend="prod71">tableReference</link> &lt;ON&gt; <link linkend="prod35">criteria</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod73" xreflabel="tablePrimary"/>tablePrimary</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod76">textTable</link> | <link linkend="prod77">arrayTable</link> | <link linkend="prod78">xmlTable</link> | <link linkend="prod79">unaryFromClause</link> | <link linkend="prod80">subqueryFromClause</link> | ( &lt;LPAREN&gt; <link linkend="prod72">joinedTable</link> &lt;RPAREN&gt; ) ) ( ( &lt;MAKEDEP&gt; ) | ( &lt;MAKENOTDEP&gt; ) )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod81" xreflabel="xmlSerialize"/>xmlSerialize</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLSERIALIZE&gt; &lt;LPAREN&gt; ( <link linkend="prod11">nonReserved</link> )? <link linkend="prod24">expression</link> ( &lt;AS&gt; ( &lt;STRING&gt; | &lt;VARCHAR&gt; | &lt;CLOB&gt; ) )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod11" xreflabel="nonReserved"/>nonReserved</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ID&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod77" xreflabel="arrayTable"/>arrayTable</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ID&gt; &lt;LPAREN&gt; <link linkend="prod24">expression</link> <link linkend="prod11">nonReserved</link> <link linkend="prod42">createElementsWithTypes</link> &lt;RPAREN&gt; ( &lt;AS&gt; )? <link linkend="prod2">id</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod76" xreflabel="textTable"/>textTable</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ID&gt; &lt;LPAREN&gt; <link linkend="prod24">expression</link> <link linkend="prod11">nonReserved</link> <link linkend="prod82">textColumn</link> ( &lt;COMMA&gt; <link linkend="prod82">textColumn</link> )* ( &lt;ID&gt; <link linkend="prod69">charVal</link> )? ( ( &lt;ESCAPE&gt; <link linkend="prod69">charVal</link> ) | ( &lt;ID&gt; <link linkend="prod69">charVal</link> ) )? ( &lt;ID&gt; ( <link linkend="prod83">intVal</link> )? )? ( &lt;ID&gt; <link linkend="prod83">intVal</link> )? &lt;RPAREN&gt; ( &lt;AS&gt; )? <link linkend="prod2">id</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod82" xreflabel="textColumn"/>textColumn</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> <link linkend="prod38">dataType</link> ( &lt;ID&gt; <link linkend="prod83">intVal</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod84" xreflabel="xmlQuery"/>xmlQuery</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLQUERY&gt; &lt;LPAREN&gt; ( <link linkend="prod85">xmlNamespaces</link> &lt;COMMA&gt; )? <link linkend="prod1">stringVal</link> ( &lt;ID&gt; <link linkend="prod65">derivedColumn</link> ( &lt;COMMA&gt; <link linkend="prod65">derivedColumn</link> )* )? ( ( &lt;NULL&gt; | <link linkend="prod11">nonReserved</link> ) &lt;ON&gt; <link linkend="prod11">nonReserved</link> )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod78" xreflabel="xmlTable"/>xmlTable</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLTABLE&gt; &lt;LPAREN&gt; ( <link linkend="prod85">xmlNamespaces</link> &lt;COMMA&gt; )? <link linkend="prod1">stringVal</link> ( &lt;ID&gt; <link linkend="prod65">derivedColumn</link> ( &lt;COMMA&gt; <link linkend="prod65">derivedColumn</link> )* )? ( &lt;ID&gt; <link linkend="prod86">xmlColumn</link> ( &lt;COMMA&gt; <link linkend="prod86">xmlColumn</link> )* )? &lt;RPAREN&gt; ( &lt;AS&gt; )? <link linkend="prod2">id</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod86" xreflabel="xmlColumn"/>xmlColumn</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link> ( ( &lt;FOR&gt; <link linkend="prod11">nonReserved</link> ) | ( <link linkend="prod38">dataType</link> ( &lt;DEFAULT_KEYWORD&gt; <link linkend="prod24">expression</link> )? ( <link linkend="prod11">nonReserved</link> <link linkend="prod1">stringVal</link> )? ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod83" xreflabel="intVal"/>intVal</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;INTEGERVAL&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod80" xreflabel="subqueryFromClause"/>subqueryFromClause</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;TABLE&gt; )? &lt;LPAREN&gt; ( <link linkend="prod13">queryExpression</link> | <link linkend="prod15">storedProcedure</link> ) &lt;RPAREN&gt; ( &lt;AS&gt; )? <link linkend="prod2">id</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod79" xreflabel="unaryFromClause"/>unaryFromClause</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;ID&gt; ( ( &lt;AS&gt; )? <link linkend="prod2">id</link> )? )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod49" xreflabel="where"/>where</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;WHERE&gt; <link linkend="prod35">criteria</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod35" xreflabel="criteria"/>criteria</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod87">compoundCritOr</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod87" xreflabel="compoundCritOr"/>compoundCritOr</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod88">compoundCritAnd</link> ( &lt;OR&gt; <link linkend="prod88">compoundCritAnd</link> )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod88" xreflabel="compoundCritAnd"/>compoundCritAnd</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod89">notCrit</link> ( &lt;AND&gt; <link linkend="prod89">notCrit</link> )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod89" xreflabel="notCrit"/>notCrit</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;NOT&gt; )? <link linkend="prod90">booleanPrimary</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod90" xreflabel="booleanPrimary"/>booleanPrimary</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod41">translateCriteria</link> | ( <link linkend="prod91">commonValueExpression</link> ( ( <link linkend="prod92">betweenCrit</link> | <link linkend="prod93">matchCrit</link> | <link linkend="prod94">setCrit</link> | <link linkend="prod95">isNullCrit</link> | <link linkend="prod96">subqueryCompareCriteria</link> | <link linkend="prod97">compareCrit</link> ) )? ) | <link linkend="prod98">existsCriteria</link> | <link linkend="prod37">hasCriteria</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod99" xreflabel="operator"/>operator</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;EQ&gt; | &lt;NE&gt; | &lt;NE2&gt; | &lt;LT&gt; | &lt;LE&gt; | &lt;GT&gt; | &lt;GE&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod97" xreflabel="compareCrit"/>compareCrit</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod99">operator</link> <link linkend="prod91">commonValueExpression</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod100" xreflabel="subquery"/>subquery</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;LPAREN&gt; ( <link linkend="prod13">queryExpression</link> | ( <link linkend="prod15">storedProcedure</link> ) ) &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod101" xreflabel="subqueryAndHint"/>subqueryAndHint</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod100">subquery</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod96" xreflabel="subqueryCompareCriteria"/>subqueryCompareCriteria</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod99">operator</link> ( &lt;ANY&gt; | &lt;SOME&gt; | &lt;ALL&gt; ) <link linkend="prod100">subquery</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod93" xreflabel="matchCrit"/>matchCrit</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;NOT&gt; )? &lt;LIKE&gt; <link linkend="prod91">commonValueExpression</link> ( &lt;ESCAPE&gt; <link linkend="prod69">charVal</link> | ( &lt;LBRACE&gt; &lt;ESCAPE&gt; <link linkend="prod69">charVal</link> &lt;RBRACE&gt; ) )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod69" xreflabel="charVal"/>charVal</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod1">stringVal</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod92" xreflabel="betweenCrit"/>betweenCrit</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;NOT&gt; )? &lt;BETWEEN&gt; <link linkend="prod91">commonValueExpression</link> &lt;AND&gt; <link linkend="prod91">commonValueExpression</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod95" xreflabel="isNullCrit"/>isNullCrit</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;IS&gt; ( &lt;NOT&gt; )? &lt;NULL&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod94" xreflabel="setCrit"/>setCrit</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;NOT&gt; )? &lt;IN&gt; ( ( <link linkend="prod101">subqueryAndHint</link> ) | ( &lt;LPAREN&gt; <link linkend="prod91">commonValueExpression</link> ( &lt;COMMA&gt; <link linkend="prod91">commonValueExpression</link> )* &lt;RPAREN&gt; ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod98" xreflabel="existsCriteria"/>existsCriteria</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;EXISTS&gt; <link linkend="prod101">subqueryAndHint</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod60" xreflabel="groupBy"/>groupBy</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;GROUP&gt; &lt;BY&gt; ( <link linkend="prod102">groupByItem</link> ( &lt;COMMA&gt; <link linkend="prod102">groupByItem</link> )* )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod102" xreflabel="groupByItem"/>groupByItem</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod24">expression</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod61" xreflabel="having"/>having</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;HAVING&gt; <link linkend="prod35">criteria</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod53" xreflabel="orderby"/>orderby</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;ORDER&gt; &lt;BY&gt; <link linkend="prod103">sortSpecification</link> ( &lt;COMMA&gt; <link linkend="prod103">sortSpecification</link> )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod103" xreflabel="sortSpecification"/>sortSpecification</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod104">sortKey</link> ( &lt;ASC&gt; | &lt;DESC&gt; )? ( <link linkend="prod11">nonReserved</link> <link linkend="prod11">nonReserved</link> )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod104" xreflabel="sortKey"/>sortKey</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod24">expression</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod54" xreflabel="limit"/>limit</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;LIMIT&gt; ( &lt;INTEGERVAL&gt; | &lt;QMARK&gt; ) ( &lt;COMMA&gt; ( &lt;INTEGERVAL&gt; | &lt;QMARK&gt; ) )?</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod45" xreflabel="option"/>option</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;OPTION&gt; ( &lt;MAKEDEP&gt; <link linkend="prod2">id</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> )* | &lt;MAKENOTDEP&gt; <link linkend="prod2">id</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> )* | &lt;NOCACHE&gt; ( <link linkend="prod2">id</link> ( &lt;COMMA&gt; <link linkend="prod2">id</link> )* )? )*</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod24" xreflabel="expression"/>expression</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod35">criteria</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod91" xreflabel="commonValueExpression"/>commonValueExpression</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod105">plusExpression</link> ( &lt;CONCAT_OP&gt; <link linkend="prod105">plusExpression</link> )* )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod105" xreflabel="plusExpression"/>plusExpression</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod106">timesExpression</link> ( <link linkend="prod107">plusOperator</link> <link linkend="prod106">timesExpression</link> )* )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod107" xreflabel="plusOperator"/>plusOperator</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;PLUS&gt; | &lt;MINUS&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod106" xreflabel="timesExpression"/>timesExpression</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod108">valueExpressionPrimary</link> ( <link linkend="prod109">timesOperator</link> <link linkend="prod108">valueExpressionPrimary</link> )* )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod109" xreflabel="timesOperator"/>timesOperator</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;STAR&gt; | &lt;SLASH&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod108" xreflabel="valueExpressionPrimary"/>valueExpressionPrimary</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;QMARK&gt; | &lt;POS_REF&gt; | <link linkend="prod110">literal</link> | ( &lt;LBRACE&gt; <link linkend="prod11">nonReserved</link> <link linkend="prod111">function</link> &lt;RBRACE&gt; ) | ( <link linkend="prod68">textAgg</link> ) | ( <link linkend="prod70">aggregateSymbol</link> ) | ( <link linkend="prod70">aggregateSymbol</link> ) | ( <link linkend="prod70">aggregateSymbol</link> ) | ( <link linkend="prod66">xmlAgg</link> ) | ( <link linkend="prod67">arrayAgg</link> ) | ( <link linkend="prod111">function</link> ) | ( &lt;ID&gt; ( &lt;LSBRACE&gt; <link linkend="prod83">intVal</link> &lt;RSBRACE&gt; )? ) | <link linkend="prod100">subquery</link> | ( &lt;LPAREN&gt; <link linkend="prod24">expression</link> &lt;RPAREN&gt; ( &lt;LSBRACE&gt; <link linkend="prod83">intVal</link> &lt;RSBRACE&gt; )? ) | <link linkend="prod112">searchedCaseExpression</link> | <link linkend="prod113">caseExpression</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod113" xreflabel="caseExpression"/>caseExpression</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;CASE&gt; <link linkend="prod24">expression</link> ( &lt;WHEN&gt; <link linkend="prod24">expression</link> &lt;THEN&gt; <link linkend="prod24">expression</link> )+ ( &lt;ELSE&gt; <link linkend="prod24">expression</link> )? &lt;END&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod112" xreflabel="searchedCaseExpression"/>searchedCaseExpression</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;CASE&gt; ( &lt;WHEN&gt; <link linkend="prod35">criteria</link> &lt;THEN&gt; <link linkend="prod24">expression</link> )+ ( &lt;ELSE&gt; <link linkend="prod24">expression</link> )? &lt;END&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod111" xreflabel="function"/>function</para></entry>
<entry align="left" valign="top"><para>::= 
( ( &lt;CONVERT&gt; &lt;LPAREN&gt; <link linkend="prod24">expression</link> &lt;COMMA&gt; <link linkend="prod38">dataType</link> &lt;RPAREN&gt; ) | ( &lt;CAST&gt; &lt;LPAREN&gt; <link linkend="prod24">expression</link> &lt;AS&gt; <link linkend="prod38">dataType</link> &lt;RPAREN&gt; ) | ( <link linkend="prod11">nonReserved</link> &lt;LPAREN&gt; <link linkend="prod24">expression</link> &lt;COMMA&gt; <link linkend="prod114">stringConstant</link> &lt;RPAREN&gt; ) | ( <link linkend="prod11">nonReserved</link> &lt;LPAREN&gt; <link linkend="prod115">intervalType</link> &lt;COMMA&gt; <link linkend="prod24">expression</link> &lt;COMMA&gt; <link linkend="prod24">expression</link> &lt;RPAREN&gt; ) | <link linkend="prod116">queryString</link> | ( ( &lt;LEFT&gt; | &lt;RIGHT&gt; | &lt;CHAR&gt; | &lt;USER&gt; | &lt;YEAR&gt; | &lt;MONTH&gt; | &lt;HOUR&gt; | &lt;MINUTE&gt; | &lt;SECOND&gt; | &lt;XMLCONCAT&gt; | &lt;XMLCOMMENT&gt; ) &lt;LPAREN&gt; ( <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* )? &lt;RPAREN&gt; ) | ( ( &lt;INSERT&gt; ) &lt;LPAREN&gt; ( <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* )? &lt;RPAREN&gt; ) | ( ( &lt;TRANSLATE&gt; ) &lt;LPAREN&gt; ( <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* )? &lt;RPAREN&gt; ) | <link linkend="prod117">xmlParse</link> | <link linkend="prod118">xmlElement</link> | ( &lt;XMLPI&gt; &lt;LPAREN&gt; ( &lt;ID&gt; <link linkend="prod119">idExpression</link> | <link linkend="prod119">idExpression</link> ) ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )? &lt;RPAREN&gt; ) | <link linkend="prod120">xmlForest</link> | <link linkend="prod81">xmlSerialize</link> | <link linkend="prod84">xmlQuery</link> | ( <link linkend="prod2">id</link> &lt;LPAREN&gt; ( <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* )? &lt;RPAREN&gt; ) )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod114" xreflabel="stringConstant"/>stringConstant</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod1">stringVal</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod117" xreflabel="xmlParse"/>xmlParse</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLPARSE&gt; &lt;LPAREN&gt; <link linkend="prod11">nonReserved</link> <link linkend="prod24">expression</link> ( <link linkend="prod11">nonReserved</link> )? &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod116" xreflabel="queryString"/>queryString</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod11">nonReserved</link> &lt;LPAREN&gt; <link linkend="prod24">expression</link> ( &lt;COMMA&gt; <link linkend="prod65">derivedColumn</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod118" xreflabel="xmlElement"/>xmlElement</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLELEMENT&gt; &lt;LPAREN&gt; ( &lt;ID&gt; <link linkend="prod2">id</link> | <link linkend="prod2">id</link> ) ( &lt;COMMA&gt; <link linkend="prod85">xmlNamespaces</link> )? ( &lt;COMMA&gt; <link linkend="prod121">xmlAttributes</link> )? ( &lt;COMMA&gt; <link linkend="prod24">expression</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod121" xreflabel="xmlAttributes"/>xmlAttributes</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLATTRIBUTES&gt; &lt;LPAREN&gt; <link linkend="prod65">derivedColumn</link> ( &lt;COMMA&gt; <link linkend="prod65">derivedColumn</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod120" xreflabel="xmlForest"/>xmlForest</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLFOREST&gt; &lt;LPAREN&gt; ( <link linkend="prod85">xmlNamespaces</link> &lt;COMMA&gt; )? <link linkend="prod65">derivedColumn</link> ( &lt;COMMA&gt; <link linkend="prod65">derivedColumn</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod85" xreflabel="xmlNamespaces"/>xmlNamespaces</para></entry>
<entry align="left" valign="top"><para>::= 
&lt;XMLNAMESPACES&gt; &lt;LPAREN&gt; <link linkend="prod122">namespaceItem</link> ( &lt;COMMA&gt; <link linkend="prod122">namespaceItem</link> )* &lt;RPAREN&gt;</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod122" xreflabel="namespaceItem"/>namespaceItem</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod1">stringVal</link> &lt;AS&gt; <link linkend="prod2">id</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para></para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;NO&gt; &lt;DEFAULT_KEYWORD&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para></para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;DEFAULT_KEYWORD&gt; <link linkend="prod1">stringVal</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod119" xreflabel="idExpression"/>idExpression</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod2">id</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod22" xreflabel="dataTypeString"/>dataTypeString</para></entry>
<entry align="left" valign="top"><para>::= 
( &lt;STRING&gt; | &lt;VARCHAR&gt; | &lt;BOOLEAN&gt; | &lt;BYTE&gt; | &lt;TINYINT&gt; | &lt;SHORT&gt; | &lt;SMALLINT&gt; | &lt;CHAR&gt; | &lt;INTEGER&gt; | &lt;LONG&gt; | &lt;BIGINT&gt; | &lt;BIGINTEGER&gt; | &lt;FLOAT&gt; | &lt;REAL&gt; | &lt;DOUBLE&gt; | &lt;BIGDECIMAL&gt; | &lt;DECIMAL&gt; | &lt;DATE&gt; | &lt;TIME&gt; | &lt;TIMESTAMP&gt; | &lt;OBJECT&gt; | &lt;BLOB&gt; | &lt;CLOB&gt; | &lt;XML&gt; )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod38" xreflabel="dataType"/>dataType</para></entry>
<entry align="left" valign="top"><para>::= 
<link linkend="prod22">dataTypeString</link></para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod115" xreflabel="intervalType"/>intervalType</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod11">nonReserved</link> )</para></entry></row>
<row>
<entry align="right" valign="top"><para><anchor id="prod110" xreflabel="literal"/>literal</para></entry>
<entry align="left" valign="top"><para>::= 
( <link linkend="prod1">stringVal</link> | &lt;INTEGERVAL&gt; | &lt;FLOATVAL&gt; | &lt;FALSE&gt; | &lt;TRUE&gt; | &lt;UNKNOWN&gt; | &lt;NULL&gt; | ( ( &lt;BOOLEANTYPE&gt; | &lt;TIMESTAMPTYPE&gt; | &lt;DATETYPE&gt; | &lt;TIMETYPE&gt; ) <link linkend="prod1">stringVal</link> &lt;RBRACE&gt; ) )</para></entry></row>
</tbody>
</tgroup>
</informaltable>
</section>
</appendix>
