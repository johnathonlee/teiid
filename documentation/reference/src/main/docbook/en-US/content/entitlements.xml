<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % CustomDTD SYSTEM "../../../../../../docbook/custom.dtd">
%CustomDTD;
]>
<chapter id="entitlements">
    <title>Data Roles</title>
    <para>Data roles, also called entitlements, are sets of permissions that are defined 
    per VDB that dictate data access (create, read,  update, delete). The use of data roles is controlled system wide with the property in 
    <code>&lt;jboss-install&gt;/server/&lt;profile&gt;/deploy/teiid/teiid-jboss-beans.xml</code> file
    in bean configuration section of <code>RuntimeEngineDeployer</code> with property <code>useDataRoles</code>.</para>
    
    <para>Once data roles are enabled, the access permissions defined in a VDB will be enforced by the Teiid Server.  
    </para>
    
    <warning><para>Teiid uses a deny by default permission system, so all VDBs deployed to the server will need roles granting access with this feature enabled.</para></warning>

    <section>
    	<title>Permissions</title>

		<para>CREATE, READ, UPDATE, DELETE (CRUD) permissions can be set for any resource path in a VDB.  
		A resource path can be as specific as the fully qualified name of a column or as general a top level model (schema) name.
		Permissions granted to a particular path apply to it and any resource paths that share the same partial name.  
		For example, granting read to "model" will also grant read to "model.table", "model.table.column", etc.
		Allowing or denying a particular action is determined by searching for permissions from the most to least specific resource paths.
		The first permission found with a specific allow or deny will be used.  
		Thus it is possible to set very general permissions at high-level resource path names and to override only as necessary at more specific resource paths. 
		</para>

		<para>Permission grants are only needed for resources that are visible.
			All non-visible, typically physical, models in a VDB are automatically
			inaccessible by user level requests. Permissions are also only applied
			to the columns and tables in the user query - not to every resource
			accessed transitively through views and procedures.
			It is important therefore to ensure that permission grants are applied
			consistently across visible models that access the same resources.
		</para>
		    	
   	    <orderedlist>
	        <para>To process a <emphasis>SELECT</emphasis> statement or a stored procedure execution, the user account requires the following access rights:</para>
	        <listitem> <para><emphasis>READ</emphasis> - on the Table(s) being accessed or the procedure being called.</para></listitem>
	        <listitem> <para><emphasis>READ</emphasis> - on every column referenced.</para></listitem>
	    </orderedlist>   
	    
	    <orderedlist>
	        <para>To process an <emphasis>INSERT</emphasis> statement, the user account requires the following access rights:</para>
	        <listitem> <para><emphasis>CREATE</emphasis> - on the Table being inserted into.</para></listitem>
	        <listitem> <para><emphasis>CREATE</emphasis> - on every column being inserted on that Table.</para></listitem>
	    </orderedlist>   
	    
	    <orderedlist>
	        <para>To process an <emphasis>UPDATE</emphasis> statement, the user account requires the following access rights:</para>
	        <listitem> <para><emphasis>UPDATE</emphasis> - on the Table being updated.</para></listitem>
	        <listitem> <para><emphasis>UPDATE</emphasis> - on every column being updated on that Table.</para></listitem>
	        <listitem> <para><emphasis>READ</emphasis> - on every column referenced in the criteria.</para></listitem>
	    </orderedlist>    
	    
	    <orderedlist>
	    	<para>To process a <emphasis>DELETE</emphasis> statement, the user account requires the following access rights:</para>
	        <listitem> <para><emphasis>DELETE</emphasis> - on the Table being deleted.</para></listitem>
	        <listitem> <para><emphasis>READ</emphasis> - on every column referenced in the criteria.</para></listitem>
	    </orderedlist> 
	    
	    <orderedlist>
	    	<para>To process a <emphasis>EXEC</emphasis> statement, the user account requires the following access rights:</para>
	        <listitem> <para><emphasis>READ</emphasis> - on the Procedure being executed.</para></listitem>
	    </orderedlist>
	       
    </section>

	<section>
		<title>XML Definition</title>
	    <para>Data roles are defined inside the <code>vdb.xml</code> file (inside the .vdb Zip archive under META-INF/vdb.xml) if you used Designer. 
    This example will show a sample "vdb.xml" file with few simple data rules.</para>
    
    <para>For example, if a VDB defines a table "TableA" in schema "modelName" with columns (column1, column2) - note that the column types do not matter.  And we wish to define three roles "RoleA", "RoleB", "RoleC" with following permissions:
   <orderedlist>
    <listitem><para>RoleA has privileges to read, write access to TableA, but can not delete.</para></listitem>
    <listitem><para>RoleB has no privileges that allow access to TableA</para></listitem>
    <listitem><para>RoleC has privileges that only allow read access to TableA.column1</para></listitem>
   </orderedlist>
	</para>
    <example><title>vdb.xml defining RoleA, RoleB, and RoleC</title>
   <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<vdb name="sample" version="1">

    <model name="modelName">
        <source name="source-name" translator-name="oracle" connection-jndi-name="java:myDS" />
    </model>

    <data-role name="RoleA">
        <description>Allow all, except Delete</description>

        <permission>
            <resource-name>modelName.TableA</resource-name>
            <allow-create />
            <allow-read />
            <allow-update />
        </permission>

        <permission>
            <resource-name>modelName.TableA.colum1</resource-name>
            <allow-create />
            <allow-read />
            <allow-update />
        </permission>

        <permission>
            <resource-name>modelName.TableA.column2</resource-name>
            <allow-create />
            <allow-read />
            <allow-update />
        </permission>

        <mapped-role-name>role1</mapped-role-name>

    </data-role>

    <data-role name="RoleC">
        <description>Allow read only</description>

        <permission>
            <resource-name>modelName.TableA</resource-name>
            <allow-read />
        </permission>

        <permission>
            <resource-name>modelName.TableA.colum1</resource-name>
            <allow-read />
        </permission>

        <mapped-role-name>role2</mapped-role-name>
    </data-role>
</vdb>]]></programlisting>    
</example>   
   <para>The above XML defined two data roles, "RoleA" which allows everything except delete on the table, "RoleC" that 
   allows only read operation on the table. Since Teiid uses deny by default, there is no explicit data-role entry needed for "RoleB".  The "mapped-role-name" defines the JAAS "role" to whom these policies are applicable.</para>
   
   <para>For assigning roles to your users in the JBoss AS, 
   check out the instructions for the selected Login Module. Check the "Admin Guide" for configuring Login Modules.</para> 
   
   <para>The "vdb.xml" file is checked against the schema file <code>vdb-deployer.xsd</code>, check the documents sections of the Teiid kit
   to find a copy of the schema file.</para>
   
	</section>

</chapter>