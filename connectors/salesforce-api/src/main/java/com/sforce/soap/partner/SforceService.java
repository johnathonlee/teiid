
/*
 * 
 */

package com.sforce.soap.partner;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.12
 * Thu Sep 01 08:54:15 CDT 2011
 * Generated source version: 2.2.12
 * 
 */


@WebServiceClient(name = "SforceService", wsdlLocation = SforceService.PARTNER_WSDL,targetNamespace = "urn:partner.soap.sforce.com") 
public class SforceService extends Service {

    public static final String PARTNER_WSDL = "partner_v22.wsdl"; //$NON-NLS-1$
	public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("urn:partner.soap.sforce.com", "SforceService"); //$NON-NLS-1$ //$NON-NLS-2$
    public final static QName Soap = new QName("urn:partner.soap.sforce.com", "Soap");//$NON-NLS-1$ //$NON-NLS-2$
    static {
        URL url = SforceService.class.getClassLoader().getResource(PARTNER_WSDL); 
    	if (url == null) {
    		System.err.println("Can not find the default wsdl for salesforce"); //$NON-NLS-1$
    	}
        WSDL_LOCATION = url;
    }

    public SforceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SforceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SforceService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     * 
     * @return
     *     returns Soap
     */
    @WebEndpoint(name = "Soap")
    public Soap getSoap() {
        return super.getPort(Soap, Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Soap
     */
    @WebEndpoint(name = "Soap")
    public Soap getSoap(WebServiceFeature... features) {
        return super.getPort(Soap, Soap.class, features);
    }

}
