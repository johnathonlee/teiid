import java.io.*;
import org.teiid.adminapi.*;
import com.metamatrix.core.util.*;
import java.lang.reflect.*;
import com.metamatrix.common.comm.exception.*;
static import com.metamatrix.core.util.ObjectConverterUtil.*;
static import com.metamatrix.script.shell.Util.*;

debug=false;


getBshPrompt() { 
    if (currentContext().internalPrompt == void || currentContext().internalPrompt == null) {
        return "admin $ ";
    }
    return currentContext().internalPrompt;
}

void checkAdmin() {
    if (internalAdmin == void || internalAdmin == null) {
        throw new Exception("Not connected.  You must call a \"connectAsAdmin\" method");
    }      
}

debug(Object msg){
    if (debug) {
        if (msg instanceof Collection) {
            for (Object object:msg) {
                print(object);
            }
        }  
        else if (msg instanceof Throwable) {
			StringWriter sw = new StringWriter();
			msg.printStackTrace(new PrintWriter(sw));
			print(sw.getBuffer().toString());
        } 
        else {
            print(msg);
        }
    }
}

class ExceptionHandler implements InvocationHandler{
	Object impl;
	ExceptionHandler(Object obj){
		impl=obj;
	}
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		try {
			return method.invoke(impl, args);
		} catch (InvocationTargetException e) {
			Throwable ex = e;
			while (ex instanceof InvocationTargetException) {
				ex = e.getTargetException();
			}
			if (interactive()) {
				print("Error:"+ex.getMessage());
				debug(ex);
			}
			else {
				throw ex;
			}
		} catch(Throwable t) {
			if (interactive()) {
				msg = t.getMessage();
				if (msg != null) {
					print(msg);
				}
				t = t.getCause();
				if (t instanceof SingleInstanceCommunicationException) {
					print("Lost Connection; disconnecting..");
					disconnect();				
				}
				debug(t);
			}
			else {
				print("Lost Connection; disconnecting..");
				disconnect();								
				throw t;
			}
		}
		return null;
	}	
}

Object createExceptionHandlingProxy(Object obj) {
	return Proxy.newProxyInstance(obj.getClass().getClassLoader(), new Class[] {Admin.class}, new ExceptionHandler(obj));	
}

boolean interactive() {
    return this.interpreter.get("bsh.interactive").toString().equals("true");
}

quit(){
    exit();
}
