/**
 * This is connection helper to a MetaMatrix Server using JDBC
 */

source(getResource("/scripts/jdbc.bsh"));
source(getResource("/scripts/adminapi.bsh"));


import java.sql.*;
import org.teiid.net.*;
import org.teiid.adminapi.*;

// These values are default values, a user can supply a property file called
// "connection.properties" those values will replace one below 
String auto_jdbc_url="jdbc:teiid:admin@mm://localhost:31000";
String auto_jdbc_user="admin";
String auto_jdbc_password="teiid";
String auto_admin_user="admin";
String auto_admin_password="admin";
String auto_admin_url="jnp://localhost:1099";
String connection_prefix="conn";


/**
 * Connect to the server using the properties specified in the connection.properties file.
 * use currentConnectionName() to get connection name
 */
Connection connect () {
    return connect(auto_jdbc_url+";user="+auto_jdbc_user+";password="+auto_jdbc_password);
}

/**
 * Connect to the Server with supplied URL, used TeiidDriver
 * @param url - complete url for connection
 */
Connection connect (String url) {
	return connectURL(url, "org.teiid.jdbc.TeiidDriver");
}

private Connection connectURL (String url, String driver) {
    if (url.startsWith("jdbc:metamatrix:") || url.startsWith("jdbc:teiid:")) {
        String contextName = genConnectionName();
        newContext(contextName);        
        url = url+";ApplicationName="+contextName;
        try {
        	Connection mmConn = connectDriver(driver, url);
            currentContext().internalPrompt = contextName+"["+extractVDBName(url)+"@"+extractHost(url)+"] $ ";
    		return mmConn;        	
        } catch(e) {
        	parentContext();
        	print("Failed to connect: {"+e.getMessage()+"}");
        	debug(e);
        	return null;
        }
    }
    else {
        print("Wrong syntax for the URL.. connection failed");
        return null;
    }
}

/**
 * Current Connection Name.
 */
String currentConnectionName() {
    if (getConnection() != null && currentContext().name != void && currentContext().name != null) {
        return currentContext().name;
    }
    throw new Exception("No Connection exists; or it is not a named connection");
}

/**
 * If you have multiple active connections; switch between those connections using this
 * see "currentConnectionName" to get current in scope connection name.
 */
void useConnection(name) {
    useContext(name); 
}

/**
* Get a ServerAdmin connection to the specified server.
* 
* @param username
* @param password
* @param url - URL in the format "mms://localhost:31443"
*/
void connectAsAdmin(String username, String password, String url) {

    if (TeiidURL.isValidServerURL(url)) {
        try {
            //url is in "server URL format": connect via ServerAdminFactory
            internalAdmin = createExceptionHandlingProxy(AdminFactory.getInstance().createAdmin(username, password.toCharArray(), url));
        } catch(e) {
        	print("Failed to connect: {"+e.getMessage()+"}");
        	debug(e);
        }        
    } else {
    	print("Wrong syntax for the URL.. connection failed. ex: \"mm://localhost:31443\"");
    }
}

/***
 * Connect as Admin using the defaults from connection.properties
 */
void connectAsAdmin() {
    connectAsAdmin(auto_admin_user, auto_admin_password, auto_admin_url);
}

/**
 * Close Admin connection
 */
void closeAdmin() {
    try {
	    if (internalAdmin != void && internalAdmin != null) {
	        internalAdmin.close();
	        internalAdmin = null;
	    }  
    }catch(e) {
    	//ignore..
    }
}
/**
 * Disconnect the connection from the server
 */
void disconnect() {
    closeConnection();
    closeAdmin();
    currentContext().internalPrompt = null;
}

private loadConnectionProperties(String propsFile){
    Properties p = new Properties();
    
    try {
        p.load(new FileInputStream(propsFile));
    }catch(e) {
    }
    
    if (p.getProperty("jdbc.url") != null) {
        auto_jdbc_url = p.getProperty("jdbc.url");
    }

    if (p.getProperty("admin.url") != null) {
    	auto_admin_url = p.getProperty("admin.url");
    }

    if (p.getProperty("jdbc.user") != null) {
        auto_jdbc_user = p.getProperty("jdbc.user");
    }

    if (p.getProperty("jdbc.password") != null) {
        auto_jdbc_password = p.getProperty("jdbc.password");
    }     
    
    if (p.getProperty("admin.user") != null) {
        auto_admin_user = p.getProperty("admin.user");
    }

    if (p.getProperty("admin.password") != null) {
        auto_admin_password = p.getProperty("admin.password");
    }     
}

//help methods

/**
 * List all of the methods currently available.
 */
void help() {
    java.util.List urls = new ArrayList();
    urls.add(getResource("/scripts/adminapi.bsh"));
    urls.add(getResource("/scripts/server.bsh"));
    urls.add(getResource("/scripts/jdbc.bsh"));
    help(urls);
}

/**
 * List the javadoc for method(s) with the specified name.
 * 
 * @param methodName
 *            Name of the method for which to specify javadoc.
 */
void help(String methodName) {
    java.util.List urls = new ArrayList();
    urls.add(getResource("/scripts/adminapi.bsh"));
    urls.add(getResource("/scripts/server.bsh"));
    urls.add(getResource("/scripts/jdbc.bsh"));
    help(urls, methodName);
}

int connCount = 0;
private synchronized String genConnectionName() {
    connCount++;
    return connection_prefix+"-"+connCount;
}

/**
 * exit the tool
 */
exit(){
    for (This ctx:allContexts()) {
        gotoContext(ctx);
        disconnect();
    }    
    
    if ( bsh.system.shutdownOnExit != false )
        System.exit(0);        
}

// Load the properties
loadConnectionProperties("connection.properties");