This is a howto of the following:

1.	Creating unit tests that use 1 or more datasources
2.	Setting up a datasource to be used during testing
3.	Executing the db integration tests


==========================================
Creating Unit Tests
==========================================

-	Unit test should be created under db/src/test/java 
-	See LocalTransactionDriverFalseOffTest.java as an example 
			
-	Test should extend org.teiid.transaction.test.BaseAbstractTransactionTestCase


-	NOTE:  the following is used in a post test phase of validating the data in the datasource 
-	when calling: this.getSource("modelname")			--- the "modelname" represents the model for which
													you want the connection for
													
													
	By default, the datasource assigned to a model will be (somewhat) random.   There is not coding to 
	specifically control this assignment, as long as the -Dusedatasources option is not used.
	
	If the -Dusedatasources option is used, then there is an implied model-to-datasource assignment.
			To understand how this assignment will be made, find the config properties file being
			loaded for this test (default is the default-config.properties) and look for
			the model-to-order mapping(s)
			
			The default Transaction.vdb has 2 models:  pm1 and pm2
			
			example:  pm1:1
					  pm2:2
					  
			Therefore, the model-to-order mapping will map to the relative order specified in the usedatasources property.
			
			example:  -Dusedatasources=oracle,postgres
			
					This will result in model 	pm1 --> oracle
												pm2 --> postgres

	To EXCLUDE a test from using a specific database type, call addProperty(ConfigPropertyNames.EXCLUDE_DATASBASE_TYPES_PROP, "postgres");
	during setup()
	
	NOTE:  The EXCLUDE option excludes based on db.type, where "usedatasources" specifies the actual datasource (not by type)
	

==========================================
Setting up a Datasource to be used during Testing
==========================================

1.	DEFINE DATASOURCE:
	To define a datasource, see the readme.txt in src/main/resources/datasources regarding defining a datasource

2.	CREATE TABLES
	To create the tables on the defined datasource, run the maven profile to execute the process to create the required tables:
		a.  to setup all sources at one time, run:   
				mvn pre-integration-test -P setupdatasources -Dmaven.test.skip=true
		b.	to setup a specific source, 
				run: mvn pre-integration-test -Ddatasource=<datasourcedir> -Psingledatasource -Dmaven.test.skip=true 
				where <datasourcedir> is the name of the directory for the datasource
				
				
				Example:
		
					mvn pre-integration-test -Ddatasource=oracle -Psingledatasource -Dmaven.test.skip=true 

==========================================
Executing the db integration tests
==========================================

The default profile in the pom.xml is set to compile and run the test.   The following are options for running tests:

	a.	Run with no regard to which specific datasource to use (only those with connections.properties file are considered):  
			run:	mvn install
	b.	To run the tests, but specify which datasource(s) to use:
			run:	mvn clean install -Dusedatasources=<comma seperated datasource names>
			Example:  mvn clean install -Dusedatasources=oracle,sqlserver
			
			
	c.	To run a single class of tests, run the "singleclass" profile
			run:	mvn clean install -Psingleclass -Dclassname=<classname>      ====>  don't add .java to classname
			



 