<?xml version="1.0" encoding="UTF-8"?>
<project name="ctc" default="main" >
	
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	  	<pathelement path="${maven.runtime.classpath}" />
	  </classpath>
	</taskdef>
	
	<target name="main" depends="init" if="" unless="" description="create all property files">
		<antcall target="run.all.test" inheritall="true" />
		<antcall target="run.single.test" inheritall="true" />
		
		<available file="${ERROR_FILE}" property="error.flagged"/>

		<fail if="error.flagged" message="One or more ctc tests failed" />


	</target>


	<target name="init" depends="set.os, set.win, set.linux" >
		
		
		<property name="ERROR_FILE" value="${root_output}/ERROR_FOUND.txt" />

		<available file="${scenario.dir}" type="dir" property="dir.exist"/>
		<fail unless="dir.exist" message="Scenario directory ${scenario.dir} does not exist" />

		
		<condition property="all">
			<not>
				<isset property="single"/>
			</not>
		</condition>
		
		<delete file="${ERROR_FILE}"/>

		
		  <copy todir="${proj_dir}/lib" failonerror="false">
		    <fileset dir="${third.party.jars.dir}"/>
		  </copy>


	</target>
	

	
	<target name="copy.third.party.jars">
	
	
	</target>
	
	<target name="set.win"
		if="WinOS">
		

		<pathconvert targetos="unix" property="proj_dir" >
		   		 <map from="\" to="/"/>
		   		<path location="${proj.dir}"/>
			 </pathconvert>
		
		<property name="root_output" value="${proj_dir}/target/bulk-query-tests" />

	</target>
	
	<target name="set.linux"
		if="UnixOS">
		<property name="root_output" value="${proj.dir}/target/bulk-query-tests" />
		<property name="proj_dir" value="${proj.dir}" />

	</target>

    <target name="run.all.test"
    		if="all" >
    	<echo>Executing ALL Scenarios</echo>
    	
    	<for param="file">
    	  <path>
    	    <fileset dir="${scenario.dir}" includes="*.properties"/>
    	  </path>
    	  <sequential>
    	  	<antcall target="exec.scenario" inheritall="true" >
   				<param name="scenario.file" value="@{file}" />
    	  		<param name="scenario.dir" value="@{file}" />
			</antcall>
	  	
    	  	<!--
    		<antcall target="exec.scenario" inheritall="true" >
    			<param name="scenario.file" value="@{file}" />
			</antcall>
	  	-->
    	  </sequential>
    	</for>
    	
    </target>
	
    <target name="run.single.test"
    		if="single" >
    	<echo>Executing Scenario ${test.scenario}</echo>
		<property name="include.what" value="${scenario.dir}/${scenario.file}" />

        <iterate target="run.scenario"/>
    </target>
	
	<target name="exec.scenario" depends="exec.win, exec.linux" >
		
	  	 <antcall target="are.there.errors" inheritall="true" />

	</target>
	
	<target name="exec.win"
		if="WinOS">
		<echo>Scenario property file ${scenario.file}</echo>
<!--
	Dont convert the config file, it fails
			<pathconvert targetos="unix" property="config_file" >
			   		 <map from="\" to="/"/>
			   		<path location="${config.file}"/>
				 </pathconvert>
-->			
			<pathconvert targetos="unix" property="scenario_file" >
			   		 <map from="\" to="/"/>
			   		<path location="${scenario.file}"/>
				 </pathconvert>
			
			<pathconvert targetos="unix" property="queryset_artifacts_dir" >
			   		 <map from="\" to="/"/>
			   		<path location="${queryset.artifacts.dir}"/>
				 </pathconvert>
			
			<pathconvert targetos="unix" property="vdb_artifacts_dir" >
			   		 <map from="\" to="/"/>
			   		<path location="${vdb.artifacts.dir}"/>
				 </pathconvert>
			
			
			  <java classname="org.teiid.test.client.TestClient" fork="true" >
			  	<classpath>
					<pathelement path="${maven.runtime.classpath}" />
			        <fileset dir="${proj_dir}/lib">
			          <include name="**/*.jar"/>
			        </fileset>
			    </classpath>
			    <jvmarg value="-Xmx1024m" />
			    <jvmarg value="-Dmetamatrix.sockets=true" />
			  	<jvmarg value="-Dconfig=${config.file}" />
			  	<jvmarg value="-Dscenariofile=${scenario_file}" />
			  	<jvmarg value="-Dqueryset.artifacts.dir=${queryset_artifacts_dir}" />
				<jvmarg value="-Dvdb.artifacts.dir=${vdb_artifacts_dir}" />
			
				  </java>

 

	</target>
	
	<target name="exec.linux"
		if="UnixOS">
		<echo>Scenario property file ${scenario.file}</echo>

          <java classname="org.teiid.test.client.TestClient" fork="true" >
          	<classpath>
        		<pathelement path="${maven.runtime.classpath}" />
                <fileset dir="${proj_dir}/lib">
                  <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <jvmarg value="-Xmx1024m" />
    	    <jvmarg value="-Dmetamatrix.sockets=true" />
          	<jvmarg value="-Dconfig=${config.file}" />
          	<jvmarg value="-Dscenariofile=${scenario.file}" />
          	<jvmarg value="-Dqueryset.artifacts.dir=${queryset.artifacts.dir}" />
        	<jvmarg value="-Dvdb.artifacts.dir=${vdb.artifacts.dir}" />

      	  </java>

	
	</target>
	
	<target name="are.there.errors" >
		<!-- load the scenario file to get the queryset thats being run -->
		<loadproperties srcFile="${scenario.file}" />
		
		
		<!-- get the scenario name based on the scenario file, strip the suffix  -->
		<basename property="scenario.name" file="${scenario.file}"
		          suffix=".properties"/>

		<echo>Are there any files ${root_output}/${queryset.dir}/output/${scenario.name}</echo>
		
	      <path id="output.dir.files">
	                  <fileset dir="${root_output}/${queryset.dir}/output/${scenario.name}">
	                  		<include name="*.txt"/>
	                  </fileset>
	        </path>
		
		<condition property="has.output">
			<resourcecount refid="output.dir.files" when="greater" count="0" />
		</condition>
		<echo>Is there output ${has.output}</echo>

	      <path id="error.files">
	                  <fileset dir="${root_output}/${queryset.dir}/output/${scenario.name}">
	                  		<include name="ERROR*"/>
	                  </fileset>
	        </path>
		
		<condition property="error.files.exist">
			<resourcecount refid="error.files" when="greater" count="0" />

		</condition>
		
		<echo>Do Error files exists ${error.files.exist}</echo>
		
		<condition property="error.exist">
			<not>
				<isset property="has.output"/>
			</not>
		</condition>
		<condition property="error.exist">
				<isset property="error.files.exist"/>
		</condition>

		<echo>Is this considered an error ${error.exist}</echo>
		
		<antcall target="touch.error.file" inheritall="true" />

	</target>

	<target name="touch.error.file"
		if="error.exist">
			<echo>Flag Error - Query Set: ${queryset.dir} Scenario: ${scenario.name} </echo>

		<concat destfile="${ERROR_FILE}" append="true" fixlastline="yes">Query Set: ${queryset.dir} Scenario: ${scenario.name} </concat>

	
	</target>
	
	<target name="set.os" >
			<condition property="isUnix">
				<and>
					<os family="unix"/>
					<not>
						<os name="Linux"/>
					</not>
					<not>
						<os name="HP-UX"/>
					</not>
				</and>
			</condition>
			<condition property="isLinux">
				<os name="Linux"/>
			</condition>
			<condition property="isHP-UX">
				<os name="HP-UX"/>
			</condition>
			<condition property="isWindows">
				<os family="windows"/>
			</condition>

			<condition property="UnixOS">
				<os family="unix"/>
			</condition>
			<condition property="WinOS">
				<os family="windows"/>
			</condition>
		</target>

	

</project>		